-- local lambda call test
local f() -> 2

assert(f() == 2)

local g = \x -> x

assert(g(3) == 3)

-- arguments test

local h(a,b,c) -> c == nil
assert(h(1, 2))

local tail(x...) -> x[#x - 1]
local head(x,y...) -> x
assert(head(3, 4, 5) == 3)
assert(tail(3, 4, 5) == 5)

-- recursive function test

local sum1(x,y...) -> #y == 0 ? x : x + sum1(y)
local sum2(x,y,z...) -> { if (#z == 0) return x + y return sum2(x + y, z) }
assert(sum1(2, 3, 4) == 9) -- normal recursive
assert(sum2(2, 3, 4) == 9) -- tail recursive

-- captures test

local test1 -> {
	local i = 0
	local a = []
	while (i < 2) {
		local j = i
		a[i] = \-> j -- capture local variable
		i += 1
	} -- while leave block, the local variable j is released
	return a
}
local fs = test1()
assert(fs[0]() == 0 && fs[1]() == 1)

-- nested function test
local curry(f) -> \x -> \y -> f(x, y)
local bif(x,y) -> x + y

assert(curry(bif)(1)(2) == 3)
